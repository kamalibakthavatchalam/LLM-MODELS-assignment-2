# -*- coding: utf-8 -*-
"""LM assignmenmt 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q_4TiR8fQ3TuPL3xhWaHFTzXUzooP7Cv

Mount Google Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Unzip the Dataset"""

import zipfile
import os

zip_path = "/content/drive/MyDrive/LLM assignment 2/IMDB Dataset.csv.zip"
extract_path = "/content/drive/MyDrive/LLM assignment 2"

os.makedirs(extract_path, exist_ok=True)

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

"""Install Required Libraries"""

!pip install transformers datasets scikit-learn pandas matplotlib tqdm

"""Import All Required Libraries"""

import pandas as pd
import numpy as np
import torch
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score
from datasets import Dataset
import matplotlib.pyplot as plt

"""Load and Prepare the IMDb Dataset


"""

# Load CSV
df = pd.read_csv("/content/drive/MyDrive/LLM assignment 2/IMDB Dataset.csv")
df.head()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set clean style
sns.set(style="whitegrid")
plt.rcParams.update({'figure.max_open_warning': 0})

# Load dataset
df = pd.read_csv("/content/drive/MyDrive/LLM assignment 2/IMDB Dataset.csv")

# Add word count column
df['word_count'] = df['review'].apply(lambda x: len(str(x).split()))

# Define color palette
colors = {'positive': '#FF6F61', 'negative': '#6B5B95'}

# 1. Sentiment distribution countplot
plt.figure(figsize=(7, 5))
ax1 = sns.countplot(x='sentiment', data=df, palette=colors)
plt.title("Sentiment Distribution", fontsize=16)
plt.xlabel("Sentiment", fontsize=12)
plt.ylabel("Number of Reviews", fontsize=12)
for p in ax1.patches:
    ax1.annotate(f"{p.get_height()}", (p.get_x() + 0.3, p.get_height() + 200))
plt.grid(axis='y', linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

# 2. Histogram of word count
plt.figure(figsize=(10, 5))
sns.histplot(df['word_count'], bins=50, kde=True, color='#2ECC71')
plt.title("Distribution of Review Word Counts", fontsize=16)
plt.xlabel("Word Count", fontsize=12)
plt.ylabel("Frequency", fontsize=12)
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""Preprocessing"""

# Map sentiment labels to integers
df['label'] = df['sentiment'].map({'positive': 1, 'negative': 0})

# Train/test split
train_texts, val_texts, train_labels, val_labels = train_test_split(
    df['review'].tolist(), df['label'].tolist(), test_size=0.2, random_state=42
)

""" 7.Tokenization with BERT"""

tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

def tokenize_function(texts):
    return tokenizer(texts, padding="max_length", truncation=True, max_length=256)

train_encodings = tokenize_function(train_texts)
val_encodings = tokenize_function(val_texts)

"""Create Dataset Objects for Hugging Face Trainer"""

class IMDbDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels
    def __len__(self):
        return len(self.labels)
    def __getitem__(self, idx):
        return {
            'input_ids': torch.tensor(self.encodings['input_ids'][idx]),
            'attention_mask': torch.tensor(self.encodings['attention_mask'][idx]),
            'labels': torch.tensor(self.labels[idx])
        }

train_dataset = IMDbDataset(train_encodings, train_labels)
val_dataset = IMDbDataset(val_encodings, val_labels)

"""Load BERT Model for Fine-Tuning"""

model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=2)

"""Training Configuration"""

from transformers import TrainingArguments, Trainer
import numpy as np
from sklearn.metrics import accuracy_score, f1_score

training_args = TrainingArguments(
    output_dir="./results",
    eval_strategy="epoch",
    save_strategy="epoch",
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=10,
    load_best_model_at_end=True,
    metric_for_best_model="accuracy",
    save_total_limit=2,
    report_to=[]

)

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=1)
    return {
        "accuracy": accuracy_score(labels, predictions),
        "f1": f1_score(labels, predictions)
    }

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics
)

trainer.train()

"""Evaluate the Model on test Set




"""

val_texts, test_texts, val_labels, test_labels = train_test_split(
    val_texts, val_labels, test_size=0.5, random_state=42
)

# Tokenize test data
test_encodings = tokenize_function(test_texts)

# Create test dataset object
test_dataset = IMDbDataset(test_encodings, test_labels)

train_eval = trainer.predict(train_dataset)
train_preds = np.argmax(train_eval.predictions, axis=1)
train_labels_array = train_eval.label_ids

from sklearn.metrics import classification_report

print("Train Set Classification Report:\n")
print(classification_report(train_labels_array, train_preds, target_names=['Negative', 'Positive']))

"""prediction"""

test_predictions_output = trainer.predict(test_dataset)
test_preds = np.argmax(test_predictions_output.predictions, axis=1)
from sklearn.metrics import classification_report

print(classification_report(test_labels, test_preds, target_names=['Negative', 'Positive']))

"""result- confusion matrix"""

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

cm_test = confusion_matrix(test_labels, test_preds)
disp = ConfusionMatrixDisplay(confusion_matrix=cm_test, display_labels=['Negative', 'Positive'])

plt.figure(figsize=(6,6))
disp.plot(cmap='Greens')
plt.title("Test Set Confusion Matrix")
plt.show()